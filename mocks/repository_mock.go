// Code generated by MockGen. DO NOT EDIT.
// Source: repository/repository.go
//
// Generated by this command:
//
//	mockgen -source=repository/repository.go -destination=mocks/repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gocb "github.com/couchbase/gocb/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ArrayAppend mocks base method.
func (m *MockRepository) ArrayAppend(ctx context.Context, key, path string, values any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArrayAppend", ctx, key, path, values)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArrayAppend indicates an expected call of ArrayAppend.
func (mr *MockRepositoryMockRecorder) ArrayAppend(ctx, key, path, values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArrayAppend", reflect.TypeOf((*MockRepository)(nil).ArrayAppend), ctx, key, path, values)
}

// ArrayRemoveFromIndex mocks base method.
func (m *MockRepository) ArrayRemoveFromIndex(ctx context.Context, key, path string, fromIndex, toIndex int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArrayRemoveFromIndex", ctx, key, path, fromIndex, toIndex)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArrayRemoveFromIndex indicates an expected call of ArrayRemoveFromIndex.
func (mr *MockRepositoryMockRecorder) ArrayRemoveFromIndex(ctx, key, path, fromIndex, toIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArrayRemoveFromIndex", reflect.TypeOf((*MockRepository)(nil).ArrayRemoveFromIndex), ctx, key, path, fromIndex, toIndex)
}

// Close mocks base method.
func (m *MockRepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepository)(nil).Close))
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, key)
}

// Get mocks base method.
func (m *MockRepository) Get(ctx context.Context, key string, result any) (gocb.Cas, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key, result)
	ret0, _ := ret[0].(gocb.Cas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ctx, key, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx, key, result)
}

// GetAndTouch mocks base method.
func (m *MockRepository) GetAndTouch(ctx context.Context, key string, result any, ttl time.Duration) (gocb.Cas, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAndTouch", ctx, key, result, ttl)
	ret0, _ := ret[0].(gocb.Cas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAndTouch indicates an expected call of GetAndTouch.
func (mr *MockRepositoryMockRecorder) GetAndTouch(ctx, key, result, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAndTouch", reflect.TypeOf((*MockRepository)(nil).GetAndTouch), ctx, key, result, ttl)
}

// RemoveMultiplePaths mocks base method.
func (m *MockRepository) RemoveMultiplePaths(ctx context.Context, key string, paths []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMultiplePaths", ctx, key, paths)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMultiplePaths indicates an expected call of RemoveMultiplePaths.
func (mr *MockRepositoryMockRecorder) RemoveMultiplePaths(ctx, key, paths any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMultiplePaths", reflect.TypeOf((*MockRepository)(nil).RemoveMultiplePaths), ctx, key, paths)
}

// ReplaceWithCas mocks base method.
func (m *MockRepository) ReplaceWithCas(ctx context.Context, key string, document any, ttl time.Duration, cas gocb.Cas) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceWithCas", ctx, key, document, ttl, cas)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceWithCas indicates an expected call of ReplaceWithCas.
func (mr *MockRepositoryMockRecorder) ReplaceWithCas(ctx, key, document, ttl, cas any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceWithCas", reflect.TypeOf((*MockRepository)(nil).ReplaceWithCas), ctx, key, document, ttl, cas)
}

// Upsert mocks base method.
func (m *MockRepository) Upsert(ctx context.Context, key string, document any, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, key, document, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockRepositoryMockRecorder) Upsert(ctx, key, document, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockRepository)(nil).Upsert), ctx, key, document, ttl)
}

// UpsertPath mocks base method.
func (m *MockRepository) UpsertPath(ctx context.Context, key, path string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertPath", ctx, key, path, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertPath indicates an expected call of UpsertPath.
func (mr *MockRepositoryMockRecorder) UpsertPath(ctx, key, path, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPath", reflect.TypeOf((*MockRepository)(nil).UpsertPath), ctx, key, path, value)
}

// UpsertPathWithCas mocks base method.
func (m *MockRepository) UpsertPathWithCas(ctx context.Context, key, path string, value any, cas gocb.Cas) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertPathWithCas", ctx, key, path, value, cas)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertPathWithCas indicates an expected call of UpsertPathWithCas.
func (mr *MockRepositoryMockRecorder) UpsertPathWithCas(ctx, key, path, value, cas any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPathWithCas", reflect.TypeOf((*MockRepository)(nil).UpsertPathWithCas), ctx, key, path, value, cas)
}
